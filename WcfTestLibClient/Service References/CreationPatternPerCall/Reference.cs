//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfTestLibClient.CreationPatternPerCall {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CreationPatternPerCall.ICreationPatterns", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICreationPatterns {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreationPatterns/StartNewSession", ReplyAction="http://tempuri.org/ICreationPatterns/StartNewSessionResponse")]
        void StartNewSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreationPatterns/StartNewSession", ReplyAction="http://tempuri.org/ICreationPatterns/StartNewSessionResponse")]
        System.Threading.Tasks.Task StartNewSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/TerminateSession", ReplyAction="http://tempuri.org/ICreationPatterns/TerminateSessionResponse")]
        void TerminateSession();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/TerminateSession", ReplyAction="http://tempuri.org/ICreationPatterns/TerminateSessionResponse")]
        System.Threading.Tasks.Task TerminateSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/ResetCounter", ReplyAction="http://tempuri.org/ICreationPatterns/ResetCounterResponse")]
        void ResetCounter();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/ResetCounter", ReplyAction="http://tempuri.org/ICreationPatterns/ResetCounterResponse")]
        System.Threading.Tasks.Task ResetCounterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreationPatterns/NextValue", ReplyAction="http://tempuri.org/ICreationPatterns/NextValueResponse")]
        int NextValue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICreationPatterns/NextValue", ReplyAction="http://tempuri.org/ICreationPatterns/NextValueResponse")]
        System.Threading.Tasks.Task<int> NextValueAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/ResetAspNetSessionCounter", ReplyAction="http://tempuri.org/ICreationPatterns/ResetAspNetSessionCounterResponse")]
        void ResetAspNetSessionCounter();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/ResetAspNetSessionCounter", ReplyAction="http://tempuri.org/ICreationPatterns/ResetAspNetSessionCounterResponse")]
        System.Threading.Tasks.Task ResetAspNetSessionCounterAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/NextAspNetSessionValue", ReplyAction="http://tempuri.org/ICreationPatterns/NextAspNetSessionValueResponse")]
        int NextAspNetSessionValue();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICreationPatterns/NextAspNetSessionValue", ReplyAction="http://tempuri.org/ICreationPatterns/NextAspNetSessionValueResponse")]
        System.Threading.Tasks.Task<int> NextAspNetSessionValueAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICreationPatternsChannel : WcfTestLibClient.CreationPatternPerCall.ICreationPatterns, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreationPatternsClient : System.ServiceModel.ClientBase<WcfTestLibClient.CreationPatternPerCall.ICreationPatterns>, WcfTestLibClient.CreationPatternPerCall.ICreationPatterns {
        
        public CreationPatternsClient() {
        }
        
        public CreationPatternsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CreationPatternsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreationPatternsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CreationPatternsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartNewSession() {
            base.Channel.StartNewSession();
        }
        
        public System.Threading.Tasks.Task StartNewSessionAsync() {
            return base.Channel.StartNewSessionAsync();
        }
        
        public void TerminateSession() {
            base.Channel.TerminateSession();
        }
        
        public System.Threading.Tasks.Task TerminateSessionAsync() {
            return base.Channel.TerminateSessionAsync();
        }
        
        public void ResetCounter() {
            base.Channel.ResetCounter();
        }
        
        public System.Threading.Tasks.Task ResetCounterAsync() {
            return base.Channel.ResetCounterAsync();
        }
        
        public int NextValue() {
            return base.Channel.NextValue();
        }
        
        public System.Threading.Tasks.Task<int> NextValueAsync() {
            return base.Channel.NextValueAsync();
        }
        
        public void ResetAspNetSessionCounter() {
            base.Channel.ResetAspNetSessionCounter();
        }
        
        public System.Threading.Tasks.Task ResetAspNetSessionCounterAsync() {
            return base.Channel.ResetAspNetSessionCounterAsync();
        }
        
        public int NextAspNetSessionValue() {
            return base.Channel.NextAspNetSessionValue();
        }
        
        public System.Threading.Tasks.Task<int> NextAspNetSessionValueAsync() {
            return base.Channel.NextAspNetSessionValueAsync();
        }
    }
}
